import sys
import os, re


def get_strings_file(txt):
    name = re.findall('/home/ubuntu/PROCESSED/(.+)', txt)
    stringtxt_name = name[0] + '_strings'
    stringstxt = stringsdir + '/' + stringtxt_name
    print("Stringtxt_name is" +  stringtxt_name)
    print("Stringstxt" + stringstxt)
    strings = open("%s/%s" % (stringsdir, stringtxt_name), 'w+') 
    os.system('strings ' + txt + ' > ' + stringstxt)
    strings.close()
    return(stringtxt_name) # returns the name of the strings output txt to parse

def makeDirectory(path):
    try:
        os.makedirs(path)
    except OSError as ose:
        if ose.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

# take the stings output as an argument and directly start xor-key extraction
def deobfuscate(masterkey, strings_lines, decrypted_f):
    # using the xor-key, decrypt the malware strings_output
    filedir = directory
    print(filedir)
    out = open("%s/%s/%s" % (filedir, sys.argv[3], decrypted_f), 'w+') 
    try:
	for line in strings_lines:
	    line = line.rstrip('\n')	
	    decrypt = ''
	    for i in range(len(line)):
		decrypt += chr(ord(line[i]) ^ masterkey)
	    out.write(line + " => " + decrypt + "\n")
    except TypeError:
    	out.write('No master-key for target string "' + sys.argv[2] + '" -- XOR-operation failed.\n')
	out.close() # save decrypted file
    print('Done decrypting\n')


def find_xorkey(strings_lines, target_chr):
    for line in strings_lines:	
	if len(line[:-1]) > len(target_chr): # check length of line
	    continue
	if (len(line) - 1) <= len(target_chr): 
	    linechar = map(ord, list(line[:-1])) # the last character is '\n'
	    for i in range(len(linechar)):
		masterkey = (linechar[i] ^ target_chr[i])
		decode_chk = []
		for c in range(len(line[:-1])):
		    decode_chk.append(linechar[c] ^ masterkey)
		    if (decode_chk[c] != target_chr[c]):
			break
		truth =  (''.join(map(lambda x: str(x), target_chr)) in ''.join(map(lambda x: str(x), decode_chk)))
		if (target_chr == decode_chk) or truth:
		    return(masterkey) # final xor-key for decryption
    

def main():
    txt = sys.argv[1]

    global directory 
    global stringsdir	
    stringsdir = os.path.dirname('STRINGS.O') + os.path.basename('STRINGS.O')
    print(stringsdir)
    if sys.argv[3] == "ARM_LSB_32" or (sys.argv[3] == "MIPS_LSB_32" or sys.argv[3] == "MIPS_MSB_32"):
	print('Before creating path', sys.argv[3])
	directory = os.path.dirname(os.path.dirname('IOCS')) + os.path.basename('IOCS') # -- this returns "/home/ubuntu"
	print(directory)
    else:
	print('Cannot create directory')
	pass
    
    decrypted_f = get_strings_file(txt) + '_decrypt'
    with open(os.path.abspath(stringsdir + '/' + get_strings_file(txt))) as f:
	strings_lines = f.readlines()
	target_str = sys.argv[2]
	target_chr = map(ord, list(target_str))   # "uswashere_"
	targetstr = ['proc', '/proc/', 'uswashere', 'MIRAI', 'www.', '/etc/']
	if target_str in targetstr:
	    targetstr.remove(target_str)
	k = 0
	while(k < len(targetstr)):
	    masterkey = find_xorkey(strings_lines, target_chr)
	    if masterkey is not None: 
		break
	    target_chr = map(ord, list(targetstr[k]))
	    print(target_chr, targetstr[k])
	    k += 1
	print(masterkey, type(masterkey))
	deobfuscate(masterkey, strings_lines, decrypted_f)
    f.close()



if __name__ == '__main__':
    main()

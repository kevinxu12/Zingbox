#
# Retrieve results of VT Hunting feature
#
# Author: David DURVAUX
# Copyright: EC DIGIT CSIRC - December 2015
#
# TODO:
#    - Improve/review proxy support
#
# Version 0.2
# Contributions by:
# Mike Sconzo - @sooshie
#
import urllib
import urllib2
import json
import os
import errno
import argparse
import csv
import sys
import datetime # to filter for today's current date

# Variables and settings
vtapi = None
vturl = "https://www.virustotal.com/intelligence/hunting/notifications-feed/?key=%s"
vtdwl = "https://www.virustotal.com/intelligence/download/?hash=%s&apikey=%s"
vtdhu = "https://www.virustotal.com/intelligence/hunting/delete-notifications/programmatic/?key=%s"
vtthresh = 3
directory = None
download = False
DEBUG = True

# Proxy settings
proxy_uri = None
proxy_usr = None
proxy_pwd = None

# Output information
jsonres = None
outfile = sys.stdout

def makeDirectory(path):
    try:
        os.makedirs(path)
    except OSError as ose:
        if ose.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def splitResults(results):
    for i in xrange(0, len(results), 100):
        yield results[i:i+100]

def cleanupNotifications(results):
    # Delete the notification from VT so they don't get double processed/retreived
    for group in list(splitResults(results)):
        data = json.dumps([str(x[-1]) for x in group])
        try:
            req = urllib2.Request(vtdhu % (vtapi), data, {'Content-Type': 'application/json'})
            f = urllib2.urlopen(req)
            resp = json.loads(f.read())
            #{"deleted": 3, "received": 3, "result": 1}
            f.close()
            if resp['deleted'] != resp['received']:
                print "ERROR: Issue deleting notification IDs from VirusTotal :'('"
        except:
            print "ERROR: Connection error :'("

def getHuntingResult():
    # Some funky thinks
    # Create an OpenerDirector with support for Basic HTTP Authentication...
    if proxy_uri:
        proxy = None
        if proxy_usr and proxy_pwd:
            proxy = urllib2.ProxyHandler({'https' : 'http://%s:%s@%s' % (proxy_usr, proxy_pwd, proxy_uri)})
        else:
            proxy = urllib2.ProxyHandler({'https' : 'http://%s' % (proxy_uri)})
        opener = urllib2.build_opener(proxy)
        urllib2.install_opener(opener)

    f = open('malwareList_file.txt', 'a+') # append to the list -- always check before downloading
    malware_list = f.read()

    try:
        result = []
	print('Querying the VT API ---- 1')
	
	today = datetime.datetime.now()
	# today = datetime.date(2018, 2, 20)
	new_date = today.strftime('%Y-%m-%d')
	print('==========Today\'s date is {}'.format(new_date))
        
	# params = {'scan_date' : today} # query the api before results are returned
	# values = urllib.urlencode(params)
	# request = urllib2.Request(vturl % (vtapi), values, {'Content-Type' : 'application/json'}) # urllib.Requests(url, values, header)
	
	# retrieve JSON object from Virus Total
        jsonfd = urllib2.urlopen(vturl % (vtapi))
        jsonstr = jsonfd.read()
	
	# print(jsonstr)
	# exit(0)	

	n = 0 # setting a limit of yara matches received -- to test/check output
	try:
	    print('In VirusTotal ---- 2\n\n')
            while jsonstr != '' and (n < 5):
                jsonvt = json.loads(jsonstr)
                for notification in jsonvt["notifications"]:
                    positive = notification["positives"]
                    yararule = notification["subject"]
                    scan_type = notification["scans"] # this filter to be used for detecting Mirai, Trojan, etc.
		    sha1 = notification["sha1"]
                    sha256 = notification["sha256"]
                    fseen = notification["first_seen"]
                    lseen = notification["last_seen"]
                    objtype = notification["type"]
                    nid = notification["id"]
                    if DEBUG:
                        print "[*] " + sha256
		
		    
		    fseen_date = fseen.split()[0]
		    print('----{} {}----'.format(fseen_date,new_date))
	            t =  (fseen_date == new_date)		
		    print(positive, vtthresh, t) # (yararule==u'ELF_ARM_LE'))
		
		    malwaretype = {'mirai': 0 } # , 'trojan': 0 , 'unclassified': 0} # can add more here	   
		    
		    
		    for av_detect in scan_type:  # checking if malware is classified as mirai/trojan/etc in AV scans
			mclass = scan_type[av_detect] 
			if mclass is not None:
			    for i in malwaretype.keys():  # for every class specified by us in dict "malwaretype"
			    	if i in mclass.lower():
				    malwaretype[i] += 1
		
		    for i in malwaretype.keys(): 
			if malwaretype[i] >= 3:

			    if(int(positive) >= int(vtthresh) and (yararule != u'Plou_New' and t)):
				# add result to list of results
				result.append([positive, yararule, i, sha1, sha256, fseen, lseen, objtype, nid])

				print('YARA:', yararule)
				print(fseen_date)
				print("----dir:{}----dl:{}-----".format(directory, download))
				# every day there can be multiple duplicate samples satisfying the first_seen criterion
				if sha1 not in malware_list:
				    f.write('Malware SHA-1: ' + sha1 + ' seen on: ' + fseen_date + '\n')	
				else:
				    continue  # move on to next since this is a duplicate
		
				if((directory) and (download)): # one download
				    try:
					print("I am here-----inside the dir & dl try block--")
					filedir = directory + '/' + yararule
					makeDirectory(filedir)
					print(filedir)
					

					vtfile = urllib2.urlopen(vtdwl % (sha1, vtapi), "%s/%s")
					#vtfile = "Sample downloaded: {}".format(sha1)
					print(vtfile)
					output = open("%s/%s" % (filedir, sha1),'wb')
					print('opened file in {}'.format(directory))
					output.write(vtfile + '\n') # do not use comma for write -- it separates them into different arguments; must use '+' for concatenation
					print('Written into file')
					n += 1
					output.close()
					# break
					exit(0)
				    except Exception as e:
					print "ERROR: Impossible to retrieve sample %s from VirusTotal :'(" % sha1
					if DEBUG:
					    print "[*] " + str(e)
                    	
		# Cleanup processed results
                cleanupNotifications(result)
                jsonfd = urllib2.urlopen(vturl % (vtapi))
                jsonstr = jsonfd.read()
		n += 1

            # Save JSON to file
            if jsonres:
                fd = open(jsonres, "w")
                fd.write(jsonstr)
                fd.close()
        except Exception as e:
            print "ERROR: Invalid result retrieved from VirusTotal (JSON Parsing Error) :'("
            if DEBUG:
                print "[*] " + str(e)

        # Return result
        return result
    except Exception as err:
        print "ERROR: Failed to retrieve Hunting result from VirusTotal :'("
        print('============={}'.format(err)) 
    
    f.close()
    return None

def outputResults(results, outfile=sys.stdout):
    if len(results) > 0:
        if outfile != sys.stdout:
            ofilename = outfile
            filenum = 0
            while os.path.isfile(outfile):
                filenum = 1 + filenum
                outfile = ofilename + "." + str(filenum)
            with open(outfile, 'wb') as csvfile:
                LDwriter = csv.writer(csvfile)
                LDwriter.writerow(["# of detection", "YARA rule", "SHA1", "Binary type", "First seen", "Last seen"])
                for row in results:
                    LDwriter.writerow(row)
        else:
            LDwriter = csv.writer(outfile)
            LDwriter.writerow(["# of detection", "YARA rule", "SHA1", "Binary type", "First seen", "Last seen"])
            for row in results:
                LDwriter.writerow(row)

def main():
    """
        Calling the script and options handling
    """

    # Argument definition
    parser = argparse.ArgumentParser(description='Retrieve results of VirusTotal Hunting.')

    # VirusTotal options
    parser.add_argument('-api', '--api', help='VirusTotal API key')
    parser.add_argument('-thres', '--threshold', help='Number of required infection to keep result (default 3)')
    parser.add_argument('--download' , action="store_true", help='Download the samples in addition to getting notifications')

    # Proxy Settings
    parser.add_argument('-puri', '--proxy_uri', help='Proxy URI')
    parser.add_argument('-pusr', '--proxy_user', help='Proxy User')
    parser.add_argument('-ppwd', '--proxy_password', help='Proxy User')

    # Output options
    parser.add_argument('-json', '--json', help='JSON file to use to store full Hunting raw result (by default not done)')
    parser.add_argument('-out', '--output', help='File to store result (by default stdout')
    parser.add_argument('--samples_directory', help='Directory where to write all matching samples (by default not done)')

    # Parse command line
    args = parser.parse_args()

    # Check if an output directory is set
    global directory
    if args.samples_directory:
	print('Before creating path', args.samples_directory)
        # directory = os.path.dirname(args.samples_directory) -- this returns <empty>
        # directory = os.path.dirname(os.path.absname(args.samples_directory)) -- this returns "/home/ubuntu"
        directory = os.path.dirname(args.samples_directory) + os.path.basename(args.samples_directory)	
	print(directory)
    # exit(0) -- to stop the program immediately after printing the directory name

    # If directory doesn't exist yet, create it
    if directory:
        makeDirectory(directory)

    global download
    if args.download:
        download = args.download

    # Parse Proxy Options
    global proxy_uri
    global proxy_usr
    global proxy_pwd
    if args.proxy_uri:
        proxy_uri = args.proxy_uri

        if args.proxy_user:
            proxy_usr = args.proxy_user

        if args.proxy_password:
            proxy_pwd = args.proxy_user

    # JSON OUTPUT
    global jsonres
    if args.json:
        jsonres = args.json

    # Control output instead of stdout
    global outfile
    if args.output:
        outfile = args.output
    else:
        outfile = sys.stdout

    # API KEY
    global vtapi
    if args.api:
        vtapi = args.api

    # Threshold control
    global vtthresh
    if args.threshold:
        vtthresh = int(args.threshold)

    # Check if minimum set of parameters is available
    if not vtapi:
        print("ERROR: you need to specify at least an API key.  Use -h to get the manual.")
        return

    # Do all the magic now :)
    results = getHuntingResult()
    if results and len(results) > 0:
        outputResults(results, outfile)
    else:
        # outputResults("0", outfile) # empty CSV file for testing purposes 
	# f = open(outfile, 'w')
	# f.write("No results returned\n")
	# f.close()
	sys.stderr.write("No results returned\n")

# Call the main function of this script and trigger all the magic \o/
if __name__ == "__main__":
    main()
# That's all folk ;)

# This script is the main body script. It tests if the QEMU is up. If so,
# it scps the malware over. It waits 2 minutes and extracts any .strace and .pcap files that were 
# generated in the meantime. It then parses those files and shuts down the QEMU.

logfile="/home/ubuntu/logfile_$1.txt"

if [ "$1" = "" || "$2" = "" ]; 
then
    echo USAGE:
    echo "sh scp_qemu_malware.sh <architecture> <port_number>"
    exit
elif [ "$1" = "MIPS_LSB_32" ] 
then
    arch="$1"
    PEM=armel_qemu.pem
elif [ "$1" = "ARM_LSB_32" ]
then
    PEM=armel_qemu.pem
    arch="$1"
elif [ "$1" = "MIPS_MSB_32" ]
then
    arch="$1"
    PEM=mips32_qemu.pem
else
    echo "New or Invalid malware architecture"
    exit
fi

portnum="$2"
arch="$1"

echo "Running time: starts at ", `date`
echo "SCP script running time: starts at `date`" >> $logfile

echo "Portnum -- $portnum" >> $logfile
echo "Architecture -- $arch" >> $logfile

# enter the INCOMING/<arch> directory, fetch the most recently downloaded file and send to QEMU <arch>
# checking inside the folder for the lastest file -- must make sure that all other files are moved into the processed folder

echo "Entering the INCOMING directory" >> $logfile
cd INCOMING/$arch
echo "Entered the INCOMING directory"  >> $logfile

latest=`ls -lt /home/ubuntu/INCOMING/$arch | head -n 1` 
regex="total 0"
	
recent_sample=`ls -t /home/ubuntu/INCOMING/$arch | head -n 1`
if [ -f $recent_sample ]; # if there is a sample present (use the most recently downloaded file), then send to QEMU
then	
    if [[ $latest =~ $regex ]]; then
        echo "$latest indicates empty folder" >> $logfile
        exit
    else
	echo "There is a sample present" >> $logfile
	if [ -z "$3" ]; then
                echo "Fetching the first sample present" >> $logfile
		echo "Found the sample -- `ls -t /home/ubuntu/INCOMING/$arch | head -n 1`" >> $logfile
		MALWARE=$recent_sample
		echo $MALWARE >> $logfile
	
	else
                echo "Fetching the pre-specified sample present" >> $logfile
		echo "Found the sample -- $3" >> $logfile
	    	MALWARE="$3"
	    	echo "Pre-specified malware to execute: $MALWARE" >> $logfile
	fi

	# create a progress file to track progress	
	# progress="/home/ubuntu/$1/scp_progress.txt"

	# send the file to QEMU <architecture> -- only if file is sent (nc_banner check here)
	nc=`python /home/ubuntu/grab_nc_banner.py $portnum`
	echo "Banner grabbing: $nc" >> $logfile
	if [  $nc = "1" ];
	then
		
		echo "Sending file $MALWARE to QEMU" >> $logfile
		scp -i /home/ubuntu/.ssh/$PEM -o StrictHostKeyChecking=no -P $portnum $MALWARE root@localhost:
		output=$?
		echo "output of scp is $output"

		# the part below checks if the scp went through successfully. If not sleep and try again.
		if [ $output -eq  0 ];
		then
			echo "all good"
		else
			echo "scp didn't work correctly" >> $logfile
			echo "starting while loop to try again" >> $logfile
			while [ $output -ne 0 ];
			do
			echo "trying" >> $logfile
			scp -i /home/ubuntu/.ssh/$PEM -o StrictHostKeyChecking=no -P $portnum $MALWARE root@localhost:
			output=$?
			echo "new output is $output" >> $logfile
			echo "sleeping" >> $logfile
			sleep 20s
			done
		fi
		
		echo $MALWARE > malware_output.txt
		echo "Sending file malware_output.txt to QEMU" >> $logfile
		scp -i /home/ubuntu/.ssh/$PEM -P $portnum malware_output.txt root@localhost:
		# create a progress file to track progress      
        	progress="/home/ubuntu/$1/scp_progress.txt"
		echo "sent" > $progress	
		echo "sent" >> $logfile

	else
		echo "SSH Service is not running"
		echo "SSH service not running, so exiting" >> $logfile
		exit	
	fi
    fi
fi	


echo "Checking progress file to see if samples are sent" >> $logfile
# move the sent/copied file into the Processed folder -- only if the connection is sucessful (otherwise it is not processed) -- checking with "nc localhost portnum"
if [ -f $progress ]; then
	if [ `cat $progress`="sent" ]; then 
		rm malware_output.txt
		mv $MALWARE /home/ubuntu/PROCESSED
		echo "Removed malware_output.txt and Moved $MALWARE into PROCESSED" >> $logfile
	else
		echo "Unsent malware sample" >> $logfile # the sample remains in the directory to be sent again
		# force overwrite the progress file with "unsent" to allow 
		echo "unsent" >| $progress 
		echo "Exiting" >> $logfile
		exit # no need to wait to retrieve the pcaps from qemu
	fi
fi


echo "Waiting for sample to get executed" >> $logfile
echo "waiting" > $progress
# try waiting for 5 min (until all the pcap/straces are created) and then retrieving the same file from QEMU
echo "Sleeping for 6 minutes" >> $logfile
echo "Sleeping for 2 minutes changed for quicker testing" >> $logfile
sleep 2m
echo "Stopped waiting" >> $logfile
echo "stopped_waitng" >| $progress

# get back into the home directory and wait to retrieve files
echo "Getting back into the home directory and wait to retrieve files" >> $logfile
cd ..
cd ..

echo "Retrieving $MALWARE.strace from QEMU" >> $logfile
scp -i .ssh/$PEM -P $portnum root@localhost:$MALWARE.strace IOCS/$1/ # > $progress

scp -i .ssh/$PEM -P $portnum root@localhost:$MALWARE.pcap IOCS/$1/ # > $progress
echo "Retrieving $MALWARE.pcap from QEMU" >> $logfile

echo "retrieved" # malware samples are in their directory 

echo "Retrieved execute sample traces from QEMU" >> $logfile

echo "$MALWARE" >> "/home/ubuntu/IOCS/log_scp.txt"

sleep 45
echo "Slept 45 seconds" >> $logfile

echo "Shutting down QEMU_$1" >> $logfile
# kill -9 `ps auxw | grep qemu-system | awk '{print $2}'`
monnum=`cat /home/ubuntu/$1/monitor.txt`
echo quit | sudo socat - UNIX-CONNECT:/home/ubuntu/$1/monitor$monnum

sleep 30
echo "QEMU has successfully shut down" >> $logfile

echo "FINISH" >| $progress 

echo "Finished dynamic analysis" >> $logfile
echo "Beginning static analysis for deobfuscation for Mirai Samples" >> $logfile

# if a Mirai sample begin the deobfuscation process
cd /home/ubuntu/IOCS/$1
if [[ `cat $MALWARE | grep -i Mirai` ]]; then
echo "Mirai Sample found" >> $logfile
python /home/ubuntu/xor_key.py /home/ubuntu/PROCESSED/$MALWARE /proc/ $1
else
echo "Not Mirai Sample" >> $logfile
fi
cd

echo "Checking in the IOCS directory for all expected output files" >> $logfile
# move into IOC/$arch
if [ -f /home/ubuntu/IOCS/$1/$MALWARE.strace ]
then
	echo "Found the strace output" >> $logfile
else
	echo "No strace output" >> $logfile
fi 

if [ -f /home/ubuntu/IOCS/$1/$MALWARE.pcap ]
then
	echo "Found the pcap output" >> $logfile
else
	echo "No pcap output" >> $logfile
fi
#insert the parsing script at this point
echo "Now starting parsing" >> $logfile
python /home/ubuntu/Strace_Pcap_Parser.py -l sendto bind connect socket -f $MALWARE  
echo "Finished static analysis on strings file" >> $logfile
exit
